<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="jar" name="create jar for BEAMs">

    <property environment="env"/>
    <property name="dir.buildfile" value="."/>
    <property name="dir.lib" value="${dir.buildfile}/lib"/>
    <property name="dir.temp" value="${dir.buildfile}/temp"/>

    <!-- Create lib directory if it doesn't exist -->
    <target name="init">
        <mkdir dir="${dir.lib}"/>
        <mkdir dir="${dir.temp}"/>
    </target>

    <!-- Download dependencies if they don't exist -->
    <target name="download-deps" depends="init">
        <!-- Download BEAST2 dependencies -->
        <get src="https://github.com/CompEvol/beast2/releases/download/v2.7.7/BEAST.v2.7.7.Linux.x86.tgz" 
             dest="${dir.lib}/beast2.tgz" 
             usetimestamp="true"/>
        <untar src="${dir.lib}/beast2.tgz" dest="${dir.lib}" compression="gzip" overwrite="false"/>
        <delete file="${dir.lib}/beast2.tgz"/>
        
        <!-- Download BEAST-Classic -->
        <get src="https://github.com/BEAST2-Dev/beast-classic/releases/download/v1.6.0/BEAST_CLASSIC.addon.v1.6.0.zip"
             dest="${dir.lib}/beast-classic.zip"
             usetimestamp="true"/>
        <unzip src="${dir.lib}/beast-classic.zip" dest="${dir.lib}/beast-classic" overwrite="false"/>
        <delete file="${dir.lib}/beast-classic.zip"/>
        
        <!-- Download BEASTLabs -->
        <get src="https://github.com/BEAST2-Dev/BEASTLabs/releases/download/v2.0.0/BEASTlabs.addon.v2.0.0.zip"
             dest="${dir.lib}/beastlabs.zip"
             usetimestamp="true"/>
        <unzip src="${dir.lib}/beastlabs.zip" dest="${dir.lib}/beastlabs" overwrite="false"/>
        <delete file="${dir.lib}/beastlabs.zip"/>
        
        <!-- Download Tidetree -->
        <get src="https://github.com/seidels/tidetree/releases/download/v1.0.1/tidetree.v1.0.1.zip"
             dest="${dir.lib}/tidetree.zip"
             usetimestamp="true"/>
        <unzip src="${dir.lib}/tidetree.zip" dest="${dir.lib}/tidetree" overwrite="false"/>
        <delete file="${dir.lib}/tidetree.zip"/>
        
        <!-- Download Feast -->
        <get src="https://github.com/tgvaughan/feast/releases/download/v10.4.0/feast.v10.4.0.zip"
             dest="${dir.lib}/feast.zip"
             usetimestamp="true"/>
        <unzip src="${dir.lib}/feast.zip" dest="${dir.lib}/feast" overwrite="false"/>
        <delete file="${dir.lib}/feast.zip"/>
    </target>

    <!-- Compile the main project -->
    <target name="compile" depends="download-deps">
        <mkdir dir="${dir.buildfile}/build"/>
        <javac srcdir="${dir.buildfile}/src" 
               destdir="${dir.buildfile}/build" 
               includeantruntime="false" 
               debug="true">
            <classpath>
                <!-- BEAST2 dependencies -->
                <fileset dir="${dir.lib}/beast/lib" includes="*.jar"/>
                <fileset dir="${dir.lib}/beast/lib/packages" includes="*.jar"/>
                
                <!-- BEAST-Classic dependencies -->
                <fileset dir="${dir.lib}/beast-classic/lib" includes="*.jar"/>
                
                <!-- BEASTLabs dependencies -->
                <fileset dir="${dir.lib}/beastlabs/lib" includes="*.jar"/>
                
                <!-- Tidetree dependencies -->
                <fileset dir="${dir.lib}/tidetree/lib" includes="*.jar"/>
                
                <!-- Feast dependencies -->
                <fileset dir="${dir.lib}/feast/lib" includes="*.jar"/>
            </classpath>
        </javac>
    </target>

    <!-- Extract dependencies -->
    <target name="extract-deps" depends="compile">
        <!-- Extract all BEAST2 dependencies -->
        <unzip dest="${dir.temp}/beast" overwrite="true">
            <fileset dir="${dir.lib}/beast/lib">
                <include name="**/*.jar"/>
                <exclude name="**/*.src.jar"/>
            </fileset>
        </unzip>
        
        <!-- Extract all BEAST-Classic dependencies -->
        <unzip dest="${dir.temp}/beast-classic" overwrite="true">
            <fileset dir="${dir.lib}/beast-classic/lib">
                <include name="**/*.jar"/>
                <exclude name="**/*.src.jar"/>
            </fileset>
        </unzip>
        
        <!-- Extract all BEASTLabs dependencies -->
        <unzip dest="${dir.temp}/beastlabs" overwrite="true">
            <fileset dir="${dir.lib}/beastlabs/lib">
                <include name="**/*.jar"/>
                <exclude name="**/*.src.jar"/>
            </fileset>
        </unzip>
        
        <!-- Extract all Tidetree dependencies -->
        <unzip dest="${dir.temp}/tidetree" overwrite="true">
            <fileset dir="${dir.lib}/tidetree/lib">
                <include name="**/*.jar"/>
                <exclude name="**/*.src.jar"/>
            </fileset>
        </unzip>
        
        <!-- Extract all Feast dependencies -->
        <unzip dest="${dir.temp}/feast" overwrite="true">
            <fileset dir="${dir.lib}/feast/lib">
                <include name="**/*.jar"/>
                <exclude name="**/*.src.jar"/>
            </fileset>
        </unzip>
    </target>

    <!-- Create the final JAR -->
    <target name="jar" depends="extract-deps">
        <jar destfile="${dir.buildfile}/beam.jar" filesetmanifest="mergewithoutmain">
            <manifest>
                <attribute name="Main-Class" value="feast.app.FeastMain"/>
                <attribute name="Class-Path" value="."/>
            </manifest>
            <fileset dir="${dir.buildfile}" includes="version.xml"/>
            <fileset dir="${dir.buildfile}/build"/>
            
            <!-- Include extracted dependencies -->
            <fileset dir="${dir.temp}/beast" includes="**/*.class,**/*.xml"/>
            <fileset dir="${dir.temp}/beast-classic" includes="**/*.class,**/*.xml"/>
            <fileset dir="${dir.temp}/beastlabs" includes="**/*.class,**/*.xml"/>
            <fileset dir="${dir.temp}/tidetree" includes="**/*.class,**/*.xml"/>
            <fileset dir="${dir.temp}/feast" includes="**/*.class,**/*.xml"/>
        </jar>
        
        <!-- Clean up temp directory -->
        <delete dir="${dir.temp}"/>
    </target>

</project>
